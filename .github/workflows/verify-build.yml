# This workflow will perform a test whenever there
# is some change in code done to ensure that the changes
# are not buggy and we are getting the desired output.
name: Test Build
on: [push, pull_request, workflow_dispatch]
env:
  PROJECT_DIR: spring-petclinic
  IMAGE_NAME: spring-petclinic
  MVN_REPO_DIR: ~/.m2/repository

jobs:
  build:
    name: Build image using Buildah
    runs-on: ubuntu-latest
    steps:

      # Checkout buildah action github repository
      - name: Checkout Buildah action
        uses: actions/checkout@v2
        with:
          path: "buildah-build"

      # Checkout spring-petclinic github repository
      - name: Checkout spring-petclinic project
        uses: actions/checkout@v2
        with:
          repository: "spring-projects/spring-petclinic"
          path: ${{ env.PROJECT_DIR }}
      
      # If none of these files has changed, we assume that the contents of
      # .m2/repository can be fetched from the cache.
      - name: Hash Maven files
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          echo "MVN_HASH=${{ hashFiles('**/pom.xml', '.mvn/**/*', 'mvnw*') }}" >> $GITHUB_ENV
      
      # Download the m2 repository from the cache to speed up the build.
      - name: Check for Maven cache
        id: check-mvn-cache
        uses: actions/cache@v2
        with:
          path: ${{ env.MVN_REPO_DIR }}
          key: ${{ env.MVN_HASH }}

      # Setup java.
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # Run maven to build the project
      - name: Maven
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          mvn package -ntp -B 

       # If there was no cache hit above, store the output into the cache now.
      - name: Save Maven repo into cache
        if: ${{ steps.check-mvn-cache.outputs.cache-hit }} != 'true'
        uses: actions/cache@v2
        with:
          path: ${{ env.MVN_REPO_DIR }}
          key: ${{ env.MVN_HASH }}

        # Store the output jar into the env for reuse below.
        # It will contain, eg. "spring-petclinic-2.3.0.BUILD-SNAPSHOT.jar"
      - name: Get jar filename  
        id: get-jarname
        run: |
          export JAR_NAME="$(basename $(ls ${{ env.PROJECT_DIR }}/target/*.jar))"
          echo "Petclinic jar is $JAR_NAME"
          echo "::set-output name=jarname::$JAR_NAME"
          echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV
      
      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: ./buildah-build/
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: 'latest ${{ github.sha }}'
          base-image: 'registry.access.redhat.com/openjdk/openjdk-11-rhel7'
          # To avoid hardcoding a particular version of the binary.
          content: |
            ./spring-petclinic/target/spring-petclinic-*.BUILD-SNAPSHOT.jar
          entrypoint: |
            java
            -jar
            spring-petclinic-*.BUILD-SNAPSHOT.jar
          port: 8080
      
      - name: Echo Outputs
        run: | 
          echo "Image: ${{ steps.build_image.outputs.image }}"
          echo "Tags: ${{ steps.build_image.outputs.tags }}"

      # Check if image is build
      - name: Check images created
        run: buildah images | grep '${{ env.IMAGE_NAME }}'
